name: CI/CD Pipeline - ToDoList Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # Registry configuration
  REGISTRY: docker.io
  REGISTRY_NAMESPACE: sicardflorent/projet-eni
  BACKEND_IMAGE_NAME: backend
  FRONTEND_IMAGE_NAME: frontend
  
  # Node.js version for tests
  NODE_VERSION: '18'

jobs:
  # Job 1: Run tests for backend
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache backend dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-backend-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-backend-

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run backend unit tests
      working-directory: ./backend
      run: npm test

    - name: Generate test coverage report (if available)
      working-directory: ./backend
      run: npm test -- --coverage --watchAll=false || echo "Coverage not configured"
      continue-on-error: true

    - name: Upload coverage reports (if available)
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
      continue-on-error: true

  # Job 2: Run tests for frontend
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache frontend dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-frontend-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-frontend-

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend unit tests
      working-directory: ./frontend
      run: npm test -- --watch=false --browsers=ChromeHeadless

    - name: Build frontend for production
      working-directory: ./frontend
      run: npm run build

  # Job 3: Build and push backend Docker image
  build-push-backend:
    name: Build & Push Backend
    runs-on: ubuntu-latest
    needs: test-backend
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_NAMESPACE }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=sha

    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  # Job 4: Build and push frontend Docker image
  build-push-frontend:
    name: Build & Push Frontend
    runs-on: ubuntu-latest
    needs: test-frontend
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_NAMESPACE }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=sha

    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
